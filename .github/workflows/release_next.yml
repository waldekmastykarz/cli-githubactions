name: Release next

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        node: [14]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
          registry-url: 'https://registry.npmjs.org'
      - name: Cache node modules
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: node_modules-${{ matrix.os }}-${{ matrix.node }}-${{ hashFiles('**/npm-shrinkwrap.json') }}
      - name: Restore dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build
        run: npm run build
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-${{ matrix.os }}-${{ matrix.node }}
          path: |
            .
            !.git
            !node_modules
  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        # node versions to run tests on
        nodeRun: [14]
        # node versions on which code was built and should be tested
        nodeBuild: [14]
        include:
          - os: ubuntu-latest
            nodeRun: 10
            nodeBuild: 14
          - os: ubuntu-latest
            nodeRun: 12
            nodeBuild: 14

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build-${{ matrix.os }}-${{ matrix.nodeBuild }}
      - name: Use Node.js ${{ matrix.nodeRun }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.nodeRun }}
          registry-url: 'https://registry.npmjs.org'
      - name: Cache node modules
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: node_modules-${{ matrix.os }}-${{ matrix.nodeBuild }}-${{ hashFiles('**/npm-shrinkwrap.json') }}
      - name: Restore dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Test with coverage
        # we run coverage only on Node@14 because older version report it incorrectly
        if: matrix.nodeRun == 14
        run: npm test
      - name: Test without coverage
        # we want to run tests on older Node versions to ensure that code works
        if: matrix.nodeRun != 14
        run: npm run test:nocov
      - uses: actions/upload-artifact@v2
        if: matrix.nodeRun == 14 && always()
        with:
          name: coverage-${{ matrix.os }}-${{ matrix.nodeRun }}
          path: coverage
  publish_next:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build-ubuntu-latest-14
      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14
          registry-url: 'https://registry.npmjs.org'
      - name: Cache node modules
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: node_modules-ubuntu-latest-14-${{ hashFiles('**/npm-shrinkwrap.json') }}
      - name: Restore dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Stamp beta to package version
        run: node scripts/update-package-version.js $GITHUB_SHA
      - name: Publish @next
        run: echo "npm publish --tag next --access public"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-ubuntu-latest-14
          path: |
            .
            !node_modules
  deploy_docs:
    needs: publish_next
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - run: pip install mkdocs-material==3.1.0
      - run: pip install pymdown-extensions==6.0
      - run: mkdocs gh-deploy --force -m "[ci skip]"
        working-directory: docs
  deploy_docker:
    needs: publish_next
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build-ubuntu-latest-14
      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14
          registry-url: 'https://registry.npmjs.org'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Extract version from package
        id: package_version
        run: |
          echo "::set-output name=version::$(node -p "require('./package.json').version")"
      - name: Build and push ${{ steps.package_version.outputs.version }}
        uses: docker/build-push-action@v2
        with:
          push: false
          tags: m365pnp/cli-microsoft365:${{ steps.package_version.outputs.version }}
          build-args: |
            CLI_VERSION=${{ steps.package_version.outputs.version }}
      - name: Build and push next
        uses: docker/build-push-action@v2
        with:
          push: false
          tags: m365pnp/cli-microsoft365:next
          build-args: |
            CLI_VERSION=${{ steps.package_version.outputs.version }}